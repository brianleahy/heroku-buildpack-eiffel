#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

#set -x

mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function export_env_dir() {
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      echo "$e" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $ENV_DIR/$e)"
      :
    done
  fi
}

# parse and derive params
#EC_PLATFORM=macosx-x86-64
EC_PLATFORM=linux-x86-64
EC_ARCHIVE=Eiffel_16.05_gpl_98814-$EC_PLATFORM.tar.bz2
EC_BUILD=https://sourceforge.net/projects/eiffelstudio/files/EiffelStudio%2016.05/Build_98814/
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd) # absolute path of buildpack
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export_env_dir

echo "-----> compile params: $BUILD_DIR $CACHE_DIR $ENV_DIR"

# if [ $RESET_CACHE ]; then
#   echo "-----> flushing cache"
# cp //usr/lib/x86_64-linux-gnu/ $BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/
#   rm -rf $CACHE_DIR/*
# fi

cp -a //usr/lib/x86_64-linux-gnu/. $BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/

EC_DIR="$CACHE_DIR/estudio"

ISE_EIFFEL=$EC_DIR/Eiffel_16.05
ISE_PLATFORM=$EC_PLATFORM
PATH=$ISE_EIFFEL/studio/spec/$ISE_PLATFORM/bin:$PATH
LIBRARY_PATH=$LIBRARY_PATH:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu
echo "PATH=$PATH"
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$BUILD_DIR/.apt/usr/share/pkgconfig
#KI_PIXMAPS=$BUILD_DIR/navigator-web/www/images/icons/pixmaps
echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
find / -name *xinerama*
#export KI_PIXMAPS
export ISE_EIFFEL
export ISE_PLATFORM

CFLAGS=" -L/usr/lib -L$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu -L$BUILD_DIR/.apt/usr/include -L$BUILD_DIR/.apt/usr/lib -I/usr/include -I$BUILD_DIR/.apt/usr/include -I$BUILD_DIR/.apt/usr/include/gtk-2.0 -I$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I$BUILD_DIR/.apt/usr/include/pango-1.0 -I$BUILD_DIR/.apt/usr/include/atk-1.0 -I$ISE_EIFFEL/unstable/library/network/socket/netssl/spec/include"

# echo "LD=$LD"
# LDFLAGS="-R $BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu"
# export LDFLAGS
# LD="ld -L$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu"
# export LD
# echo "new LD=$LD"

export CFLAGS

MYSQLINC=/usr/include/mysql
export MYSQLINC
MYSQLLIB=/usr/lib/x86_64-linux-gnu
export MYSQLLIB

#----- Setup NGINX -----#

ln -s $BUILD_DIR/collage /$BUILD_DIR/.apt/etc/nginx/sites-enabled
service nginx reload

#----- Setup Eiffel -----#

if pkg-config --modversion gtk+-2.0; then
    echo "--->GTK exists"
else
    echo "--->No GTK"
fi

echo "-----> Checking Eiffel Compiler"
if [ ! -d $EC_DIR ]; then
    echo "Fetching Eiffel Compiler" | indent
  mkdir -p $EC_DIR
  curl -L -O $EC_BUILD$EC_ARCHIVE 
  tar jxf $EC_ARCHIVE -C $EC_DIR
  rm -rf $EC_ARCHIVE
  pushd .
  cd $ISE_EIFFEL/library/store/dbms/rdbms/odbc/Clib
  finish_freezing -library
  popd
  pushd .
  cd $ISE_EIFFEL/library/store/dbms/rdbms/mysql/Clib
  finish_freezing -library
  popd
fi

cp $BUILD_DIR/net_ssl-safe.ecf $ISE_EIFFEL/unstable/library/network/socket/netssl/net_ssl-safe.ecf
cp $BUILD_DIR/ev_gtk_dependent_application_imp.e $ISE_EIFFEL/library/vision2/implementation/gtk/kernel/ev_gtk_dependent_application_imp.e
cp $BUILD_DIR/ev_gtk_environment.e $ISE_EIFFEL/library/vision2/implementation/gtk/kernel/ev_gtk_environment.e
cp $BUILD_DIR/ev_pixel_buffer_imp.e $ISE_EIFFEL/library/vision2/implementation/gtk/support/ev_pixel_buffer_imp.e
#cp $BUILD_DIR/ev_shared_transport_i.e $ISE_EIFFEL/library/vision2/implementation/implementation_interface/support/ev_shared_transport_i.e
#cp $BUILD_DIR/ev_abstract_pick_and_dropable.e $ISE_EIFFEL/library/vision2/interface/properties/ev_abstract_pick_and_dropable.e
#cp $BUILD_DIR/ev_application_imp.e $ISE_EIFFEL/library/vision2/implementation/gtk/kernel/ev_application_imp.e

echo "Eiffel Compiler installed" | indent
 
if [ ! $EC_CONFIG ]; then
  EC_CONFIG=$(find $BUILD_DIR -maxdepth 1 -name "*.ecf" -print -quit | head -n 1)
else
  echo "Using defined ecf " $EC_CONFIG | indent
  EC_CONFIG=$BUILD_DIR/$EC_CONFIG
fi 
if [ ! $EC_TARGET ]; then
  EC_TARGET=$(sed -n 's/.*target name="\([A-z]*\).*/\1/p' <$EC_CONFIG | head -n 1)
else
  echo "Using defined target " $EC_TARGET | indent
fi

echo $BUILD_DIR
cd $BUILD_DIR

export KI_SOURCE=$BUILD_DIR/navigator-server
pwd

echo "-------> List Build Directory Contents <--------"

ls

echo "-----> Compiling $EC_CONFIG for target $EC_TARGET"

ec -finalize -config $EC_CONFIG -target $EC_TARGET -clean -batch

# cp -r $EC_DIR $BUILD_DIR
# cp -r EIFGENs $BUILD_DIR
ls -lah $BUILD_DIR/.apt/usr/lib
ls -lah /usr/lib

cd EIFGENs/$EC_TARGET/F_code
finish_freezing
chmod a+x $EC_TARGET
cp $EC_TARGET $BUILD_DIR
cd $BUILD_DIR

# rm $ISE_EIFFEL

