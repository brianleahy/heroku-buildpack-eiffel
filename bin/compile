#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

#set -x

mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function export_env_dir() {
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      echo "$e" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $ENV_DIR/$e)"
      :
    done
  fi
}

# parse and derive params
#EC_PLATFORM=macosx-x86-64
EC_PLATFORM=linux-x86-64
EC_ARCHIVE=Eiffel_15.12_gpl_98497-$EC_PLATFORM.tar.bz2
EC_BUILD=https://sourceforge.net/projects/eiffelstudio/files/EiffelStudio%2015.12/Build_98497/
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd) # absolute path of buildpack
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "Current directory:"
ls -lah .
echo "BUILD_DIR listing:"
ls -lah $BUILD_DIR

export_env_dir

echo "-----> compile params: $BUILD_DIR $CACHE_DIR $ENV_DIR"

if [ $RESET_CACHE ]; then
  echo "-----> flushing cache"
  rm -rf $CACHE_DIR/*
fi

EC_DIR="$CACHE_DIR/estudio"

ISE_EIFFEL=$EC_DIR/Eiffel_15.12
ISE_PLATFORM=$EC_PLATFORM
PATH=$ISE_EIFFEL/studio/spec/$ISE_PLATFORM/bin:$PATH
echo "PATH=$PATH"
export ISE_EIFFEL
export ISE_PLATFORM
CFLAGS="-I$BUILD_DIR/.apt/usr/include -L$BUILD_DIR/.apt/usr/lib"
CFLAGS="-I/usr/include -L/usr/lib"
export CFLAGS
MYSQLINC=/usr/include/mysql
export MYSQLINC
MYSQLLIB=/usr/lib/x86_64-linux-gnu
export MYSQLLIB

echo "-----> Checking Eiffel Compiler"
if [ ! -d $EC_DIR ]; then
    echo "Fetching Eiffel Compiler" | indent
	mkdir -p $EC_DIR
	curl -L -O $EC_BUILD$EC_ARCHIVE 
	tar jxf $EC_ARCHIVE -C $EC_DIR
	rm -rf $EC_ARCHIVE
	pushd .
	cd $ISE_EIFFEL/library/store/dbms/rdbms/odbc/Clib
	finish_freezing -library
	popd
	pushd .
	cd $ISE_EIFFEL/library/store/dbms/rdbms/mysql/Clib
	finish_freezing -library
	popd
fi

echo "Eiffel Compiler installed" | indent
 
if [ ! $EC_CONFIG ]; then
	EC_CONFIG=$(find $BUILD_DIR -maxdepth 1 -name "*.ecf" -print -quit | head -n 1)
else
	echo "Using defined ecf " $EC_CONFIG | indent
	EC_CONFIG=$BUILD_DIR/$EC_CONFIG
fi 
if [ ! $EC_TARGET ]; then
	EC_TARGET=$(sed -n 's/.*target name="\([A-z]*\).*/\1/p' <$EC_CONFIG | head -n 1)
else
	echo "Using defined target " $EC_TARGET | indent
fi

echo "-----> Compiling $EC_CONFIG for target $EC_TARGET"

export KI_SOURCE=$BUILD_DIR/navigator-server
pwd

ls -lah $KI_SOURCE
ec -finalize -config $EC_CONFIG -target $EC_TARGET -clean -batch

cp -r $EC_DIR $BUILD_DIR
cp -r EIFGENs $BUILD_DIR
ls -lah $BUILD_DIR/.apt/usr/lib
# ls -lah /usr/lib

cd EIFGENs/$EC_TARGET/F_code
finish_freezing
chmod a+x $EC_TARGET
cp $EC_TARGET $BUILD_DIR
cd $BUILD_DIR

